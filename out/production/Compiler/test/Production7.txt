program' → program
program → block
block → { decls stmts }
decls → decls decl
decls → ε
decl → type id ;
type → basic C
C → [ num ] C
C → ε
stmts → stmts M stmt M
stmts → ε
stmt → loc = bool ;
stmt → if ( bool ) M stmt
stmt → if ( bool ) M stmt N else M stmt
stmt → while M ( bool ) M stmt
stmt → do M stmt while ( bool ) ; M
stmt → break ;
stmt → continue ;
stmt → block
loc → loc [ bool ]
loc → id
bool → bool || M join
bool → join
join → join && M equality
join → equality
M → ε
N → ε
equality → equality == rel
equality → equality != rel
equality → rel
rel → expr < expr
rel → expr <= expr
rel → expr >= expr
rel → expr > expr
rel → expr
expr → expr + term
expr → expr - term
expr → term
term → term * unary
term → term / unary
term → unary
unary → ! unary
unary → - unary
unary → factor
factor → ( bool )
factor → loc
factor → num
factor → real
factor → true
factor → false
