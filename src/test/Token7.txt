< { , delimiter >
< int , basic >
< i , id >
< ; , otherOp >
< int , basic >
< [ , bracket >
< 10 , num >
< ] , bracket >
< [ , bracket >
< 10 , num >
< ] , bracket >
< b , id >
< ; , otherOp >
< float , basic >
< j , id >
< ; , otherOp >
< double , basic >
< k , id >
< ; , otherOp >
< float , basic >
< [ , bracket >
< 100 , num >
< ] , bracket >
< x , id >
< ; , otherOp >
< boolean , basic >
< flag , id >
< ; , otherOp >
< i , id >
< = , assOp >
< 16 , num >
< ; , otherOp >
< j , id >
< = , assOp >
< 100.45999908447266 , real >
< ; , otherOp >
< flag , id >
< = , assOp >
< false , key >
< ; , otherOp >
< x , id >
< [ , bracket >
< j , id >
< ] , bracket >
< = , assOp >
< 10 , num >
< ; , otherOp >
< if , key >
< ( , bracket >
< ! , logicOp >
< ( , bracket >
< x , id >
< > , relOp >
< y , id >
< ) , bracket >
< ) , bracket >
< r , id >
< = , assOp >
< true , key >
< ; , otherOp >
< else , key >
< r , id >
< = , assOp >
< false , key >
< ; , otherOp >
< while , key >
< ( , bracket >
< true , key >
< ) , bracket >
< { , delimiter >
< int , basic >
< b , id >
< ; , otherOp >
< if , key >
< ( , bracket >
< i , id >
< >= , relOp >
< j , id >
< ) , bracket >
< break , key >
< ; , otherOp >
< do , key >
< { , delimiter >
< int , basic >
< c , id >
< ; , otherOp >
< j , id >
< = , assOp >
< j , id >
< - , ariOp >
< 1 , num >
< ; , otherOp >
< } , delimiter >
< while , key >
< ( , bracket >
< x , id >
< [ , bracket >
< j , id >
< ] , bracket >
< > , relOp >
< v , id >
< ) , bracket >
< ; , otherOp >
< if , key >
< ( , bracket >
< i , id >
< >= , relOp >
< j , id >
< ) , bracket >
< break , key >
< ; , otherOp >
< x , id >
< = , assOp >
< a , id >
< [ , bracket >
< i , id >
< ] , bracket >
< ; , otherOp >
< a , id >
< [ , bracket >
< i , id >
< ] , bracket >
< = , assOp >
< a , id >
< [ , bracket >
< j , id >
< ] , bracket >
< ; , otherOp >
< x , id >
< [ , bracket >
< j , id >
< ] , bracket >
< = , assOp >
< x , id >
< ; , otherOp >
< } , delimiter >
< } , delimiter >
