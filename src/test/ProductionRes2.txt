I0
<program'> -> . <program>, $
<program> -> . <block>., $
<block> -> . <const-decl><var-decl><proc-decl><statement>, .
<const-decl> -> . const<const-assignment-list>;, call/var/while/begin/if/.
<const-decl> -> . , call/var/while/begin/if/.

I1
<program'> -><program> . , $

I2
<program> -><block> . ., $

I3
<block> -><const-decl> . <var-decl><proc-decl><statement>, .
<var-decl> -> . var<ident-list>;, call/while/begin/if/.
<var-decl> -> . ε, call/while/begin/if/.

I4
<const-decl> ->const . <const-assignment-list>;, call/var/while/begin/if/.
<const-assignment-list> -> . <ident>=<number>, ;
<const-assignment-list> -> . <const-assignment-list>,<ident>=<number>, ;
<const-assignment-list> -> . <ident>=<number>, ,
<const-assignment-list> -> . <const-assignment-list>,<ident>=<number>, ,

I5
<program> -><block>. . , $

I6
<block> -><const-decl><var-decl> . <proc-decl><statement>, .
<proc-decl> -> . <proc-decl>procedure<ident>;<block>;, call/while/begin/if/.
<proc-decl> -> . ε, call/while/begin/if/.
<proc-decl> -> . <proc-decl>procedure<ident>;<block>;, procedure
<proc-decl> -> . ε, procedure

I7
<var-decl> ->var . <ident-list>;, call/while/begin/if/.
<ident-list> -> . <ident>, ;
<ident-list> -> . <ident-list>,<ident>, ;
<ident-list> -> . <ident>, ,
<ident-list> -> . <ident-list>,<ident>, ,

I8
<var-decl> ->ε . , call/while/begin/if/.

I9
<const-decl> ->const<const-assignment-list> . ;, call/var/while/begin/if/.

I10
<const-assignment-list> -><const-assignment-list> . ,<ident>=<number>, ;

I11
<const-assignment-list> -><const-assignment-list> . ,<ident>=<number>, ,

I12
<const-assignment-list> -><ident> . =<number>, ;

I13
<const-assignment-list> -><ident> . =<number>, ,

I14
<block> -><const-decl><var-decl><proc-decl> . <statement>, .
<statement> -> . <ident>:=<expression>, .
<statement> -> . call<ident>, .
<statement> -> . begin<statement-list>end, .
<statement> -> . if<condition>then<statement>, .
<statement> -> . while<condition>do<statement>, .
<statement> -> . ε, .

I15
<proc-decl> -><proc-decl> . procedure<ident>;<block>;, call/while/begin/if/.

I16
<proc-decl> -><proc-decl> . procedure<ident>;<block>;, procedure

I17
<proc-decl> ->ε . , call/while/begin/if/.

I18
<proc-decl> ->ε . , procedure

I19
<var-decl> ->var<ident-list> . ;, call/while/begin/if/.

I20
<ident-list> -><ident-list> . ,<ident>, ;

I21
<ident-list> -><ident-list> . ,<ident>, ,

I22
<ident-list> -><ident> . , ;

I23
<ident-list> -><ident> . , ,

I24
<const-decl> ->const<const-assignment-list>; . , call/var/while/begin/if/.

I25
<const-assignment-list> -><const-assignment-list>, . <ident>=<number>, ;

I26
<const-assignment-list> -><const-assignment-list>, . <ident>=<number>, ,

I27
<const-assignment-list> -><ident>= . <number>, ;

I28
<const-assignment-list> -><ident>= . <number>, ,

I29
<block> -><const-decl><var-decl><proc-decl><statement> . , .

I30
<statement> -><ident> . :=<expression>, .

I31
<statement> ->call . <ident>, .

I32
<statement> ->begin . <statement-list>end, .
<statement-list> -> . <statement>, end
<statement-list> -> . <statement-list>;<statement>, end
<statement> -> . <ident>:=<expression>, end
<statement> -> . call<ident>, end
<statement> -> . begin<statement-list>end, end
<statement> -> . if<condition>then<statement>, end
<statement> -> . while<condition>do<statement>, end
<statement> -> . ε, end
<statement-list> -> . <statement>, ;
<statement-list> -> . <statement-list>;<statement>, ;

I33
<statement> ->if . <condition>then<statement>, .
<condition> -> . odd<expression>, then
<condition> -> . <expression><relation><expression>, then

I34
<statement> ->while . <condition>do<statement>, .
<condition> -> . odd<expression>, do
<condition> -> . <expression><relation><expression>, do

I35
<statement> ->ε . , .

I36
<proc-decl> -><proc-decl>procedure . <ident>;<block>;, call/while/begin/if/.

I37
<proc-decl> -><proc-decl>procedure . <ident>;<block>;, procedure

I38
<var-decl> ->var<ident-list>; . , call/while/begin/if/.

I39
<ident-list> -><ident-list>, . <ident>, ;

I40
<ident-list> -><ident-list>, . <ident>, ,

I41
<const-assignment-list> -><const-assignment-list>,<ident> . =<number>, ;

I42
<const-assignment-list> -><const-assignment-list>,<ident> . =<number>, ,

I43
<const-assignment-list> -><ident>=<number> . , ;

I44
<const-assignment-list> -><ident>=<number> . , ,

I45
<statement> -><ident>:= . <expression>, .
<expression> -> . <term>, .
<expression> -> . <adding-operator><term>, .
<expression> -> . <expression><adding-operator><term>, .
<term> -> . <factor>, .
<term> -> . <term><multiplying-operator><factor>, .
<adding-operator> -> . +, (
<adding-operator> -> . , (
<expression> -> . <term>, +
<expression> -> . <adding-operator><term>, +
<expression> -> . <expression><adding-operator><term>, +
<factor> -> . <ident>, .
<factor> -> . <number>, .
<factor> -> . (<expression>), .
<term> -> . <factor>, *//
<term> -> . <term><multiplying-operator><factor>, *//

I46
<statement> ->call<ident> . , .

I47
<statement> ->begin<statement-list> . end, .

I48
<statement-list> -><statement-list> . ;<statement>, end

I49
<statement-list> -><statement-list> . ;<statement>, ;

I50
<statement-list> -><statement> . , end

I51
<statement-list> -><statement> . , ;

I52
<statement> -><ident> . :=<expression>, end

I53
<statement> ->call . <ident>, end

I54
<statement> ->begin . <statement-list>end, end
<statement-list> -> . <statement>, end
<statement-list> -> . <statement-list>;<statement>, end
<statement> -> . <ident>:=<expression>, end
<statement> -> . call<ident>, end
<statement> -> . begin<statement-list>end, end
<statement> -> . if<condition>then<statement>, end
<statement> -> . while<condition>do<statement>, end
<statement> -> . ε, end
<statement-list> -> . <statement>, ;
<statement-list> -> . <statement-list>;<statement>, ;

I55
<statement> ->if . <condition>then<statement>, end
<condition> -> . odd<expression>, then
<condition> -> . <expression><relation><expression>, then

I56
<statement> ->while . <condition>do<statement>, end
<condition> -> . odd<expression>, do
<condition> -> . <expression><relation><expression>, do

I57
<statement> ->ε . , end

I58
<statement> ->if<condition> . then<statement>, .

I59
<condition> ->odd . <expression>, then
<expression> -> . <term>, then
<expression> -> . <adding-operator><term>, then
<expression> -> . <expression><adding-operator><term>, then
<term> -> . <factor>, then
<term> -> . <term><multiplying-operator><factor>, then
<adding-operator> -> . +, (
<adding-operator> -> . , (
<expression> -> . <term>, +
<expression> -> . <adding-operator><term>, +
<expression> -> . <expression><adding-operator><term>, +
<factor> -> . <ident>, then
<factor> -> . <number>, then
<factor> -> . (<expression>), then
<term> -> . <factor>, *//
<term> -> . <term><multiplying-operator><factor>, *//

I60
<condition> -><expression> . <relation><expression>, then
<relation> -> . =, (/+
<relation> -> . <>, (/+
<relation> -> . <, (/+
<relation> -> . >, (/+
<relation> -> . <=, (/+
<relation> -> . >=, (/+

I61
<statement> ->while<condition> . do<statement>, .

I62
<condition> ->odd . <expression>, do
<expression> -> . <term>, do
<expression> -> . <adding-operator><term>, do
<expression> -> . <expression><adding-operator><term>, do
<term> -> . <factor>, do
<term> -> . <term><multiplying-operator><factor>, do
<adding-operator> -> . +, (
<adding-operator> -> . , (
<expression> -> . <term>, +
<expression> -> . <adding-operator><term>, +
<expression> -> . <expression><adding-operator><term>, +
<factor> -> . <ident>, do
<factor> -> . <number>, do
<factor> -> . (<expression>), do
<term> -> . <factor>, *//
<term> -> . <term><multiplying-operator><factor>, *//

I63
<condition> -><expression> . <relation><expression>, do
<relation> -> . =, (/+
<relation> -> . <>, (/+
<relation> -> . <, (/+
<relation> -> . >, (/+
<relation> -> . <=, (/+
<relation> -> . >=, (/+

I64
<proc-decl> -><proc-decl>procedure<ident> . ;<block>;, call/while/begin/if/.

I65
<proc-decl> -><proc-decl>procedure<ident> . ;<block>;, procedure

I66
<ident-list> -><ident-list>,<ident> . , ;

I67
<ident-list> -><ident-list>,<ident> . , ,

I68
<const-assignment-list> -><const-assignment-list>,<ident>= . <number>, ;

I69
<const-assignment-list> -><const-assignment-list>,<ident>= . <number>, ,

I70
<statement> -><ident>:=<expression> . , .

I71
<expression> -><expression> . <adding-operator><term>, .
<adding-operator> -> . +, (
<adding-operator> -> . , (

I72
<expression> -><expression> . <adding-operator><term>, +
<adding-operator> -> . +, (
<adding-operator> -> . , (

I73
<expression> -><term> . , .

I74
<term> -><term> . <multiplying-operator><factor>, .
<multiplying-operator> -> . *, (
<multiplying-operator> -> . /, (

I75
<expression> -><term> . , +

I76
<term> -><term> . <multiplying-operator><factor>, *//
<multiplying-operator> -> . *, (
<multiplying-operator> -> . /, (

I77
<expression> -><adding-operator> . <term>, .
<term> -> . <factor>, .
<term> -> . <term><multiplying-operator><factor>, .
<factor> -> . <ident>, .
<factor> -> . <number>, .
<factor> -> . (<expression>), .
<term> -> . <factor>, *//
<term> -> . <term><multiplying-operator><factor>, *//

I78
<expression> -><adding-operator> . <term>, +
<term> -> . <factor>, +
<term> -> . <term><multiplying-operator><factor>, +
<factor> -> . <ident>, +
<factor> -> . <number>, +
<factor> -> . (<expression>), +
<term> -> . <factor>, *//
<term> -> . <term><multiplying-operator><factor>, *//

I79
<term> -><factor> . , .

I80
<term> -><factor> . , *//

I81
<adding-operator> ->+ . , (

I82
<factor> -><ident> . , .

I83
<factor> -><number> . , .

I84
<factor> ->( . <expression>), .
<expression> -> . <term>, )
<expression> -> . <adding-operator><term>, )
<expression> -> . <expression><adding-operator><term>, )
<term> -> . <factor>, )
<term> -> . <term><multiplying-operator><factor>, )
<adding-operator> -> . +, (
<adding-operator> -> . , (
<expression> -> . <term>, +
<expression> -> . <adding-operator><term>, +
<expression> -> . <expression><adding-operator><term>, +
<factor> -> . <ident>, )
<factor> -> . <number>, )
<factor> -> . (<expression>), )
<term> -> . <factor>, *//
<term> -> . <term><multiplying-operator><factor>, *//

I85
<statement> ->begin<statement-list>end . , .

I86
<statement-list> -><statement-list>; . <statement>, end
<statement> -> . <ident>:=<expression>, end
<statement> -> . call<ident>, end
<statement> -> . begin<statement-list>end, end
<statement> -> . if<condition>then<statement>, end
<statement> -> . while<condition>do<statement>, end
<statement> -> . ε, end

I87
<statement-list> -><statement-list>; . <statement>, ;
<statement> -> . <ident>:=<expression>, ;
<statement> -> . call<ident>, ;
<statement> -> . begin<statement-list>end, ;
<statement> -> . if<condition>then<statement>, ;
<statement> -> . while<condition>do<statement>, ;
<statement> -> . ε, ;

I88
<statement> -><ident>:= . <expression>, end
<expression> -> . <term>, end
<expression> -> . <adding-operator><term>, end
<expression> -> . <expression><adding-operator><term>, end
<term> -> . <factor>, end
<term> -> . <term><multiplying-operator><factor>, end
<adding-operator> -> . +, (
<adding-operator> -> . , (
<expression> -> . <term>, +
<expression> -> . <adding-operator><term>, +
<expression> -> . <expression><adding-operator><term>, +
<factor> -> . <ident>, end
<factor> -> . <number>, end
<factor> -> . (<expression>), end
<term> -> . <factor>, *//
<term> -> . <term><multiplying-operator><factor>, *//

I89
<statement> ->call<ident> . , end

I90
<statement> ->begin<statement-list> . end, end

I91
<statement> ->if<condition> . then<statement>, end

I92
<statement> ->while<condition> . do<statement>, end

I93
<statement> ->if<condition>then . <statement>, .
<statement> -> . <ident>:=<expression>, .
<statement> -> . call<ident>, .
<statement> -> . begin<statement-list>end, .
<statement> -> . if<condition>then<statement>, .
<statement> -> . while<condition>do<statement>, .
<statement> -> . ε, .

I94
<condition> ->odd<expression> . , then

I95
<expression> -><expression> . <adding-operator><term>, then
<adding-operator> -> . +, (
<adding-operator> -> . , (

I96
<expression> -><term> . , then

I97
<term> -><term> . <multiplying-operator><factor>, then
<multiplying-operator> -> . *, (
<multiplying-operator> -> . /, (

I98
<expression> -><adding-operator> . <term>, then
<term> -> . <factor>, then
<term> -> . <term><multiplying-operator><factor>, then
<factor> -> . <ident>, then
<factor> -> . <number>, then
<factor> -> . (<expression>), then
<term> -> . <factor>, *//
<term> -> . <term><multiplying-operator><factor>, *//

I99
<term> -><factor> . , then

I100
<factor> -><ident> . , then

I101
<factor> -><number> . , then

I102
<factor> ->( . <expression>), then
<expression> -> . <term>, )
<expression> -> . <adding-operator><term>, )
<expression> -> . <expression><adding-operator><term>, )
<term> -> . <factor>, )
<term> -> . <term><multiplying-operator><factor>, )
<adding-operator> -> . +, (
<adding-operator> -> . , (
<expression> -> . <term>, +
<expression> -> . <adding-operator><term>, +
<expression> -> . <expression><adding-operator><term>, +
<factor> -> . <ident>, )
<factor> -> . <number>, )
<factor> -> . (<expression>), )
<term> -> . <factor>, *//
<term> -> . <term><multiplying-operator><factor>, *//

I103
<condition> -><expression><relation> . <expression>, then
<expression> -> . <term>, then
<expression> -> . <adding-operator><term>, then
<expression> -> . <expression><adding-operator><term>, then
<term> -> . <factor>, then
<term> -> . <term><multiplying-operator><factor>, then
<adding-operator> -> . +, (
<adding-operator> -> . , (
<expression> -> . <term>, +
<expression> -> . <adding-operator><term>, +
<expression> -> . <expression><adding-operator><term>, +
<factor> -> . <ident>, then
<factor> -> . <number>, then
<factor> -> . (<expression>), then
<term> -> . <factor>, *//
<term> -> . <term><multiplying-operator><factor>, *//

I104
<relation> ->= . , (/+

I105
<relation> -><> . , (/+

I106
<relation> ->< . , (/+

I107
<relation> ->> . , (/+

I108
<relation> -><= . , (/+

I109
<relation> ->>= . , (/+

I110
<statement> ->while<condition>do . <statement>, .
<statement> -> . <ident>:=<expression>, .
<statement> -> . call<ident>, .
<statement> -> . begin<statement-list>end, .
<statement> -> . if<condition>then<statement>, .
<statement> -> . while<condition>do<statement>, .
<statement> -> . ε, .

I111
<condition> ->odd<expression> . , do

I112
<expression> -><expression> . <adding-operator><term>, do
<adding-operator> -> . +, (
<adding-operator> -> . , (

I113
<expression> -><term> . , do

I114
<term> -><term> . <multiplying-operator><factor>, do
<multiplying-operator> -> . *, (
<multiplying-operator> -> . /, (

I115
<expression> -><adding-operator> . <term>, do
<term> -> . <factor>, do
<term> -> . <term><multiplying-operator><factor>, do
<factor> -> . <ident>, do
<factor> -> . <number>, do
<factor> -> . (<expression>), do
<term> -> . <factor>, *//
<term> -> . <term><multiplying-operator><factor>, *//

I116
<term> -><factor> . , do

I117
<factor> -><ident> . , do

I118
<factor> -><number> . , do

I119
<factor> ->( . <expression>), do
<expression> -> . <term>, )
<expression> -> . <adding-operator><term>, )
<expression> -> . <expression><adding-operator><term>, )
<term> -> . <factor>, )
<term> -> . <term><multiplying-operator><factor>, )
<adding-operator> -> . +, (
<adding-operator> -> . , (
<expression> -> . <term>, +
<expression> -> . <adding-operator><term>, +
<expression> -> . <expression><adding-operator><term>, +
<factor> -> . <ident>, )
<factor> -> . <number>, )
<factor> -> . (<expression>), )
<term> -> . <factor>, *//
<term> -> . <term><multiplying-operator><factor>, *//

I120
<condition> -><expression><relation> . <expression>, do
<expression> -> . <term>, do
<expression> -> . <adding-operator><term>, do
<expression> -> . <expression><adding-operator><term>, do
<term> -> . <factor>, do
<term> -> . <term><multiplying-operator><factor>, do
<adding-operator> -> . +, (
<adding-operator> -> . , (
<expression> -> . <term>, +
<expression> -> . <adding-operator><term>, +
<expression> -> . <expression><adding-operator><term>, +
<factor> -> . <ident>, do
<factor> -> . <number>, do
<factor> -> . (<expression>), do
<term> -> . <factor>, *//
<term> -> . <term><multiplying-operator><factor>, *//

I121
<proc-decl> -><proc-decl>procedure<ident>; . <block>;, call/while/begin/if/.
<block> -> . <const-decl><var-decl><proc-decl><statement>, ;
<const-decl> -> . const<const-assignment-list>;, call/var/;/while/begin/if
<const-decl> -> . , call/var/;/while/begin/if

I122
<proc-decl> -><proc-decl>procedure<ident>; . <block>;, procedure
<block> -> . <const-decl><var-decl><proc-decl><statement>, ;
<const-decl> -> . const<const-assignment-list>;, call/var/;/while/begin/if
<const-decl> -> . , call/var/;/while/begin/if

I123
<const-assignment-list> -><const-assignment-list>,<ident>=<number> . , ;

I124
<const-assignment-list> -><const-assignment-list>,<ident>=<number> . , ,

I125
<expression> -><expression><adding-operator> . <term>, .
<term> -> . <factor>, .
<term> -> . <term><multiplying-operator><factor>, .
<factor> -> . <ident>, .
<factor> -> . <number>, .
<factor> -> . (<expression>), .
<term> -> . <factor>, *//
<term> -> . <term><multiplying-operator><factor>, *//

I126
<expression> -><expression><adding-operator> . <term>, +
<term> -> . <factor>, +
<term> -> . <term><multiplying-operator><factor>, +
<factor> -> . <ident>, +
<factor> -> . <number>, +
<factor> -> . (<expression>), +
<term> -> . <factor>, *//
<term> -> . <term><multiplying-operator><factor>, *//

I127
<term> -><term><multiplying-operator> . <factor>, .
<factor> -> . <ident>, .
<factor> -> . <number>, .
<factor> -> . (<expression>), .

I128
<multiplying-operator> ->* . , (

I129
<multiplying-operator> ->/ . , (

I130
<term> -><term><multiplying-operator> . <factor>, *//
<factor> -> . <ident>, *//
<factor> -> . <number>, *//
<factor> -> . (<expression>), *//

I131
<expression> -><adding-operator><term> . , .

I132
<expression> -><adding-operator><term> . , +

I133
<term> -><term> . <multiplying-operator><factor>, +
<multiplying-operator> -> . *, (
<multiplying-operator> -> . /, (

I134
<term> -><factor> . , +

I135
<factor> -><ident> . , +

I136
<factor> -><number> . , +

I137
<factor> ->( . <expression>), +
<expression> -> . <term>, )
<expression> -> . <adding-operator><term>, )
<expression> -> . <expression><adding-operator><term>, )
<term> -> . <factor>, )
<term> -> . <term><multiplying-operator><factor>, )
<adding-operator> -> . +, (
<adding-operator> -> . , (
<expression> -> . <term>, +
<expression> -> . <adding-operator><term>, +
<expression> -> . <expression><adding-operator><term>, +
<factor> -> . <ident>, )
<factor> -> . <number>, )
<factor> -> . (<expression>), )
<term> -> . <factor>, *//
<term> -> . <term><multiplying-operator><factor>, *//

I138
<factor> ->(<expression> . ), .

I139
<expression> -><expression> . <adding-operator><term>, )
<adding-operator> -> . +, (
<adding-operator> -> . , (

I140
<expression> -><term> . , )

I141
<term> -><term> . <multiplying-operator><factor>, )
<multiplying-operator> -> . *, (
<multiplying-operator> -> . /, (

I142
<expression> -><adding-operator> . <term>, )
<term> -> . <factor>, )
<term> -> . <term><multiplying-operator><factor>, )
<factor> -> . <ident>, )
<factor> -> . <number>, )
<factor> -> . (<expression>), )
<term> -> . <factor>, *//
<term> -> . <term><multiplying-operator><factor>, *//

I143
<term> -><factor> . , )

I144
<factor> -><ident> . , )

I145
<factor> -><number> . , )

I146
<factor> ->( . <expression>), )
<expression> -> . <term>, )
<expression> -> . <adding-operator><term>, )
<expression> -> . <expression><adding-operator><term>, )
<term> -> . <factor>, )
<term> -> . <term><multiplying-operator><factor>, )
<adding-operator> -> . +, (
<adding-operator> -> . , (
<expression> -> . <term>, +
<expression> -> . <adding-operator><term>, +
<expression> -> . <expression><adding-operator><term>, +
<factor> -> . <ident>, )
<factor> -> . <number>, )
<factor> -> . (<expression>), )
<term> -> . <factor>, *//
<term> -> . <term><multiplying-operator><factor>, *//

I147
<statement-list> -><statement-list>;<statement> . , end

I148
<statement-list> -><statement-list>;<statement> . , ;

I149
<statement> -><ident> . :=<expression>, ;

I150
<statement> ->call . <ident>, ;

I151
<statement> ->begin . <statement-list>end, ;
<statement-list> -> . <statement>, end
<statement-list> -> . <statement-list>;<statement>, end
<statement> -> . <ident>:=<expression>, end
<statement> -> . call<ident>, end
<statement> -> . begin<statement-list>end, end
<statement> -> . if<condition>then<statement>, end
<statement> -> . while<condition>do<statement>, end
<statement> -> . ε, end
<statement-list> -> . <statement>, ;
<statement-list> -> . <statement-list>;<statement>, ;

I152
<statement> ->if . <condition>then<statement>, ;
<condition> -> . odd<expression>, then
<condition> -> . <expression><relation><expression>, then

I153
<statement> ->while . <condition>do<statement>, ;
<condition> -> . odd<expression>, do
<condition> -> . <expression><relation><expression>, do

I154
<statement> ->ε . , ;

I155
<statement> -><ident>:=<expression> . , end

I156
<expression> -><expression> . <adding-operator><term>, end
<adding-operator> -> . +, (
<adding-operator> -> . , (

I157
<expression> -><term> . , end

I158
<term> -><term> . <multiplying-operator><factor>, end
<multiplying-operator> -> . *, (
<multiplying-operator> -> . /, (

I159
<expression> -><adding-operator> . <term>, end
<term> -> . <factor>, end
<term> -> . <term><multiplying-operator><factor>, end
<factor> -> . <ident>, end
<factor> -> . <number>, end
<factor> -> . (<expression>), end
<term> -> . <factor>, *//
<term> -> . <term><multiplying-operator><factor>, *//

I160
<term> -><factor> . , end

I161
<factor> -><ident> . , end

I162
<factor> -><number> . , end

I163
<factor> ->( . <expression>), end
<expression> -> . <term>, )
<expression> -> . <adding-operator><term>, )
<expression> -> . <expression><adding-operator><term>, )
<term> -> . <factor>, )
<term> -> . <term><multiplying-operator><factor>, )
<adding-operator> -> . +, (
<adding-operator> -> . , (
<expression> -> . <term>, +
<expression> -> . <adding-operator><term>, +
<expression> -> . <expression><adding-operator><term>, +
<factor> -> . <ident>, )
<factor> -> . <number>, )
<factor> -> . (<expression>), )
<term> -> . <factor>, *//
<term> -> . <term><multiplying-operator><factor>, *//

I164
<statement> ->begin<statement-list>end . , end

I165
<statement> ->if<condition>then . <statement>, end
<statement> -> . <ident>:=<expression>, end
<statement> -> . call<ident>, end
<statement> -> . begin<statement-list>end, end
<statement> -> . if<condition>then<statement>, end
<statement> -> . while<condition>do<statement>, end
<statement> -> . ε, end

I166
<statement> ->while<condition>do . <statement>, end
<statement> -> . <ident>:=<expression>, end
<statement> -> . call<ident>, end
<statement> -> . begin<statement-list>end, end
<statement> -> . if<condition>then<statement>, end
<statement> -> . while<condition>do<statement>, end
<statement> -> . ε, end

I167
<statement> ->if<condition>then<statement> . , .

I168
<expression> -><expression><adding-operator> . <term>, then
<term> -> . <factor>, then
<term> -> . <term><multiplying-operator><factor>, then
<factor> -> . <ident>, then
<factor> -> . <number>, then
<factor> -> . (<expression>), then
<term> -> . <factor>, *//
<term> -> . <term><multiplying-operator><factor>, *//

I169
<term> -><term><multiplying-operator> . <factor>, then
<factor> -> . <ident>, then
<factor> -> . <number>, then
<factor> -> . (<expression>), then

I170
<expression> -><adding-operator><term> . , then

I171
<factor> ->(<expression> . ), then

I172
<condition> -><expression><relation><expression> . , then

I173
<statement> ->while<condition>do<statement> . , .

I174
<expression> -><expression><adding-operator> . <term>, do
<term> -> . <factor>, do
<term> -> . <term><multiplying-operator><factor>, do
<factor> -> . <ident>, do
<factor> -> . <number>, do
<factor> -> . (<expression>), do
<term> -> . <factor>, *//
<term> -> . <term><multiplying-operator><factor>, *//

I175
<term> -><term><multiplying-operator> . <factor>, do
<factor> -> . <ident>, do
<factor> -> . <number>, do
<factor> -> . (<expression>), do

I176
<expression> -><adding-operator><term> . , do

I177
<factor> ->(<expression> . ), do

I178
<condition> -><expression><relation><expression> . , do

I179
<proc-decl> -><proc-decl>procedure<ident>;<block> . ;, call/while/begin/if/.

I180
<block> -><const-decl> . <var-decl><proc-decl><statement>, ;
<var-decl> -> . var<ident-list>;, call/;/while/begin/if
<var-decl> -> . ε, call/;/while/begin/if

I181
<const-decl> ->const . <const-assignment-list>;, call/var/;/while/begin/if
<const-assignment-list> -> . <ident>=<number>, ;
<const-assignment-list> -> . <const-assignment-list>,<ident>=<number>, ;
<const-assignment-list> -> . <ident>=<number>, ,
<const-assignment-list> -> . <const-assignment-list>,<ident>=<number>, ,

I182
<proc-decl> -><proc-decl>procedure<ident>;<block> . ;, procedure

I183
<expression> -><expression><adding-operator><term> . , .

I184
<expression> -><expression><adding-operator><term> . , +

I185
<term> -><term><multiplying-operator><factor> . , .

I186
<term> -><term><multiplying-operator><factor> . , *//

I187
<factor> -><ident> . , *//

I188
<factor> -><number> . , *//

I189
<factor> ->( . <expression>), *//
<expression> -> . <term>, )
<expression> -> . <adding-operator><term>, )
<expression> -> . <expression><adding-operator><term>, )
<term> -> . <factor>, )
<term> -> . <term><multiplying-operator><factor>, )
<adding-operator> -> . +, (
<adding-operator> -> . , (
<expression> -> . <term>, +
<expression> -> . <adding-operator><term>, +
<expression> -> . <expression><adding-operator><term>, +
<factor> -> . <ident>, )
<factor> -> . <number>, )
<factor> -> . (<expression>), )
<term> -> . <factor>, *//
<term> -> . <term><multiplying-operator><factor>, *//

I190
<term> -><term><multiplying-operator> . <factor>, +
<factor> -> . <ident>, +
<factor> -> . <number>, +
<factor> -> . (<expression>), +

I191
<factor> ->(<expression> . ), +

I192
<factor> ->(<expression>) . , .

I193
<expression> -><expression><adding-operator> . <term>, )
<term> -> . <factor>, )
<term> -> . <term><multiplying-operator><factor>, )
<factor> -> . <ident>, )
<factor> -> . <number>, )
<factor> -> . (<expression>), )
<term> -> . <factor>, *//
<term> -> . <term><multiplying-operator><factor>, *//

I194
<term> -><term><multiplying-operator> . <factor>, )
<factor> -> . <ident>, )
<factor> -> . <number>, )
<factor> -> . (<expression>), )

I195
<expression> -><adding-operator><term> . , )

I196
<factor> ->(<expression> . ), )

I197
<statement> -><ident>:= . <expression>, ;
<expression> -> . <term>, ;
<expression> -> . <adding-operator><term>, ;
<expression> -> . <expression><adding-operator><term>, ;
<term> -> . <factor>, ;
<term> -> . <term><multiplying-operator><factor>, ;
<adding-operator> -> . +, (
<adding-operator> -> . , (
<expression> -> . <term>, +
<expression> -> . <adding-operator><term>, +
<expression> -> . <expression><adding-operator><term>, +
<factor> -> . <ident>, ;
<factor> -> . <number>, ;
<factor> -> . (<expression>), ;
<term> -> . <factor>, *//
<term> -> . <term><multiplying-operator><factor>, *//

I198
<statement> ->call<ident> . , ;

I199
<statement> ->begin<statement-list> . end, ;

I200
<statement> ->if<condition> . then<statement>, ;

I201
<statement> ->while<condition> . do<statement>, ;

I202
<expression> -><expression><adding-operator> . <term>, end
<term> -> . <factor>, end
<term> -> . <term><multiplying-operator><factor>, end
<factor> -> . <ident>, end
<factor> -> . <number>, end
<factor> -> . (<expression>), end
<term> -> . <factor>, *//
<term> -> . <term><multiplying-operator><factor>, *//

I203
<term> -><term><multiplying-operator> . <factor>, end
<factor> -> . <ident>, end
<factor> -> . <number>, end
<factor> -> . (<expression>), end

I204
<expression> -><adding-operator><term> . , end

I205
<factor> ->(<expression> . ), end

I206
<statement> ->if<condition>then<statement> . , end

I207
<statement> ->while<condition>do<statement> . , end

I208
<expression> -><expression><adding-operator><term> . , then

I209
<term> -><term><multiplying-operator><factor> . , then

I210
<factor> ->(<expression>) . , then

I211
<expression> -><expression><adding-operator><term> . , do

I212
<term> -><term><multiplying-operator><factor> . , do

I213
<factor> ->(<expression>) . , do

I214
<proc-decl> -><proc-decl>procedure<ident>;<block>; . , call/while/begin/if/.

I215
<block> -><const-decl><var-decl> . <proc-decl><statement>, ;
<proc-decl> -> . <proc-decl>procedure<ident>;<block>;, call/;/while/begin/if
<proc-decl> -> . ε, call/;/while/begin/if
<proc-decl> -> . <proc-decl>procedure<ident>;<block>;, procedure
<proc-decl> -> . ε, procedure

I216
<var-decl> ->var . <ident-list>;, call/;/while/begin/if
<ident-list> -> . <ident>, ;
<ident-list> -> . <ident-list>,<ident>, ;
<ident-list> -> . <ident>, ,
<ident-list> -> . <ident-list>,<ident>, ,

I217
<var-decl> ->ε . , call/;/while/begin/if

I218
<const-decl> ->const<const-assignment-list> . ;, call/var/;/while/begin/if

I219
<proc-decl> -><proc-decl>procedure<ident>;<block>; . , procedure

I220
<factor> ->(<expression> . ), *//

I221
<term> -><term><multiplying-operator><factor> . , +

I222
<factor> ->(<expression>) . , +

I223
<expression> -><expression><adding-operator><term> . , )

I224
<term> -><term><multiplying-operator><factor> . , )

I225
<factor> ->(<expression>) . , )

I226
<statement> -><ident>:=<expression> . , ;

I227
<expression> -><expression> . <adding-operator><term>, ;
<adding-operator> -> . +, (
<adding-operator> -> . , (

I228
<expression> -><term> . , ;

I229
<term> -><term> . <multiplying-operator><factor>, ;
<multiplying-operator> -> . *, (
<multiplying-operator> -> . /, (

I230
<expression> -><adding-operator> . <term>, ;
<term> -> . <factor>, ;
<term> -> . <term><multiplying-operator><factor>, ;
<factor> -> . <ident>, ;
<factor> -> . <number>, ;
<factor> -> . (<expression>), ;
<term> -> . <factor>, *//
<term> -> . <term><multiplying-operator><factor>, *//

I231
<term> -><factor> . , ;

I232
<factor> -><ident> . , ;

I233
<factor> -><number> . , ;

I234
<factor> ->( . <expression>), ;
<expression> -> . <term>, )
<expression> -> . <adding-operator><term>, )
<expression> -> . <expression><adding-operator><term>, )
<term> -> . <factor>, )
<term> -> . <term><multiplying-operator><factor>, )
<adding-operator> -> . +, (
<adding-operator> -> . , (
<expression> -> . <term>, +
<expression> -> . <adding-operator><term>, +
<expression> -> . <expression><adding-operator><term>, +
<factor> -> . <ident>, )
<factor> -> . <number>, )
<factor> -> . (<expression>), )
<term> -> . <factor>, *//
<term> -> . <term><multiplying-operator><factor>, *//

I235
<statement> ->begin<statement-list>end . , ;

I236
<statement> ->if<condition>then . <statement>, ;
<statement> -> . <ident>:=<expression>, ;
<statement> -> . call<ident>, ;
<statement> -> . begin<statement-list>end, ;
<statement> -> . if<condition>then<statement>, ;
<statement> -> . while<condition>do<statement>, ;
<statement> -> . ε, ;

I237
<statement> ->while<condition>do . <statement>, ;
<statement> -> . <ident>:=<expression>, ;
<statement> -> . call<ident>, ;
<statement> -> . begin<statement-list>end, ;
<statement> -> . if<condition>then<statement>, ;
<statement> -> . while<condition>do<statement>, ;
<statement> -> . ε, ;

I238
<expression> -><expression><adding-operator><term> . , end

I239
<term> -><term><multiplying-operator><factor> . , end

I240
<factor> ->(<expression>) . , end

I241
<block> -><const-decl><var-decl><proc-decl> . <statement>, ;
<statement> -> . <ident>:=<expression>, ;
<statement> -> . call<ident>, ;
<statement> -> . begin<statement-list>end, ;
<statement> -> . if<condition>then<statement>, ;
<statement> -> . while<condition>do<statement>, ;
<statement> -> . ε, ;

I242
<proc-decl> -><proc-decl> . procedure<ident>;<block>;, call/;/while/begin/if

I243
<proc-decl> ->ε . , call/;/while/begin/if

I244
<var-decl> ->var<ident-list> . ;, call/;/while/begin/if

I245
<const-decl> ->const<const-assignment-list>; . , call/var/;/while/begin/if

I246
<factor> ->(<expression>) . , *//

I247
<expression> -><expression><adding-operator> . <term>, ;
<term> -> . <factor>, ;
<term> -> . <term><multiplying-operator><factor>, ;
<factor> -> . <ident>, ;
<factor> -> . <number>, ;
<factor> -> . (<expression>), ;
<term> -> . <factor>, *//
<term> -> . <term><multiplying-operator><factor>, *//

I248
<term> -><term><multiplying-operator> . <factor>, ;
<factor> -> . <ident>, ;
<factor> -> . <number>, ;
<factor> -> . (<expression>), ;

I249
<expression> -><adding-operator><term> . , ;

I250
<factor> ->(<expression> . ), ;

I251
<statement> ->if<condition>then<statement> . , ;

I252
<statement> ->while<condition>do<statement> . , ;

I253
<block> -><const-decl><var-decl><proc-decl><statement> . , ;

I254
<proc-decl> -><proc-decl>procedure . <ident>;<block>;, call/;/while/begin/if

I255
<var-decl> ->var<ident-list>; . , call/;/while/begin/if

I256
<expression> -><expression><adding-operator><term> . , ;

I257
<term> -><term><multiplying-operator><factor> . , ;

I258
<factor> ->(<expression>) . , ;

I259
<proc-decl> -><proc-decl>procedure<ident> . ;<block>;, call/;/while/begin/if

I260
<proc-decl> -><proc-decl>procedure<ident>; . <block>;, call/;/while/begin/if
<block> -> . <const-decl><var-decl><proc-decl><statement>, ;
<const-decl> -> . const<const-assignment-list>;, call/var/;/while/begin/if
<const-decl> -> . , call/var/;/while/begin/if

I261
<proc-decl> -><proc-decl>procedure<ident>;<block> . ;, call/;/while/begin/if

I262
<proc-decl> -><proc-decl>procedure<ident>;<block>; . , call/;/while/begin/if

