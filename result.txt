<package, key>
<main, id>
<;, otherOp>
<import, key>
<lexer, id>
<., otherOp>
<Lexer, id>
<;, otherOp>
<import, key>
<lexer, id>
<., otherOp>
<Token, id>
<;, otherOp>
<import, key>
<java, id>
<., otherOp>
<io, id>
<., otherOp>
<*, ariOp>
<;, otherOp>
<public, key>
<class, key>
<Main, id>
<{, delimiter>
<private, key>
<static, key>
<final, key>
<String, id>
<pathnameInput, id>
<=, assOp>
<"./test.txt", string>
<;, otherOp>
<private, key>
<static, key>
<final, key>
<String, id>
<pathnameOutput, id>
<=, assOp>
<"./result.txt", string>
<;, otherOp>
<private, key>
<static, key>
<boolean, key>
<flag, id>
<=, assOp>
<false, key>
<;, otherOp>
<public, key>
<static, key>
<void, key>
<main, id>
<(, delimiter>
<String, id>
<[, delimiter>
<], delimiter>
<args, id>
<), delimiter>
<throws, key>
<IOException, id>
<{, delimiter>
<File, id>
<inputFile, id>
<=, assOp>
<new, key>
<File, id>
<(, delimiter>
<pathnameInput, id>
<), delimiter>
<;, otherOp>
<File, id>
<outputFile, id>
<=, assOp>
<new, key>
<File, id>
<(, delimiter>
<pathnameOutput, id>
<), delimiter>
<;, otherOp>
<checkFile, id>
<(, delimiter>
<inputFile, id>
<,, otherOp>
<outputFile, id>
<), delimiter>
<;, otherOp>
<BufferedWriter, id>
<bufferedWriter, id>
<=, assOp>
<new, key>
<BufferedWriter, id>
<(, delimiter>
<new, key>
<FileWriter, id>
<(, delimiter>
<outputFile, id>
<), delimiter>
<), delimiter>
<;, otherOp>
<Lexer, id>
<lexer, id>
<=, assOp>
<Lexer, id>
<., otherOp>
<getInstance, id>
<(, delimiter>
<inputFile, id>
<), delimiter>
<;, otherOp>
<lexer, id>
<., otherOp>
<delegate, id>
<(, delimiter>
<(, delimiter>
<s, id>
<), delimiter>
<->, otherOp>
<{, delimiter>
<try, key>
<{, delimiter>
<bufferedWriter, id>
<., otherOp>
<write, id>
<(, delimiter>
<s, id>
<), delimiter>
<;, otherOp>
<bufferedWriter, id>
<., otherOp>
<newLine, id>
<(, delimiter>
<), delimiter>
<;, otherOp>
<System, id>
<., otherOp>
<out, id>
<., otherOp>
<println, id>
<(, delimiter>
<s, id>
<), delimiter>
<;, otherOp>
<}, delimiter>
<catch, key>
<(, delimiter>
<IOException, id>
<e, id>
<), delimiter>
<{, delimiter>
<e, id>
<., otherOp>
<printStackTrace, id>
<(, delimiter>
<), delimiter>
<;, otherOp>
<}, delimiter>
<}, delimiter>
<,, otherOp>
<(, delimiter>
<), delimiter>
<->, otherOp>
<flag, id>
<=, assOp>
<true, key>
<), delimiter>
<;, otherOp>
<Token, id>
<token, id>
<;, otherOp>
<while, key>
<(, delimiter>
<true, key>
<), delimiter>
<{, delimiter>
<if, key>
<(, delimiter>
<(, delimiter>
<token, id>
<=, assOp>
<lexer, id>
<., otherOp>
<scan, id>
<(, delimiter>
<), delimiter>
<), delimiter>
<!=, relOp>
<null, key>
<), delimiter>
<{, delimiter>
<String, id>
<temp, id>
<=, assOp>
<token, id>
<., otherOp>
<getToken, id>
<(, delimiter>
<), delimiter>
<;, otherOp>
<bufferedWriter, id>
<., otherOp>
<write, id>
<(, delimiter>
<temp, id>
<), delimiter>
<;, otherOp>
<bufferedWriter, id>
<., otherOp>
<newLine, id>
<(, delimiter>
<), delimiter>
<;, otherOp>
<System, id>
<., otherOp>
<out, id>
<., otherOp>
<println, id>
<(, delimiter>
<temp, id>
<), delimiter>
<;, otherOp>
<}, delimiter>
<if, key>
<(, delimiter>
<flag, id>
<), delimiter>
<break, key>
<;, otherOp>
<}, delimiter>
<bufferedWriter, id>
<., otherOp>
<close, id>
<(, delimiter>
<), delimiter>
<;, otherOp>
<}, delimiter>
<private, key>
<static, key>
<void, key>
<checkFile, id>
<(, delimiter>
<File, id>
<inputFile, id>
<,, otherOp>
<File, id>
<outputFile, id>
<), delimiter>
<throws, key>
<IOException, id>
<{, delimiter>
<if, key>
<(, delimiter>
<!, logicOp>
<inputFile, id>
<., otherOp>
<exists, id>
<(, delimiter>
<), delimiter>
<), delimiter>
<{, delimiter>
<System, id>
<., otherOp>
<out, id>
<., otherOp>
<println, id>
<(, delimiter>
<"�޷��ҵ�Դ�ļ�", string>
<), delimiter>
<;, otherOp>
<}, delimiter>
<if, key>
<(, delimiter>
<outputFile, id>
<., otherOp>
<exists, id>
<(, delimiter>
<), delimiter>
<), delimiter>
<{, delimiter>
<outputFile, id>
<., otherOp>
<delete, id>
<(, delimiter>
<), delimiter>
<;, otherOp>
<outputFile, id>
<., otherOp>
<createNewFile, id>
<(, delimiter>
<), delimiter>
<;, otherOp>
<}, delimiter>
<else, key>
<outputFile, id>
<., otherOp>
<createNewFile, id>
<(, delimiter>
<), delimiter>
<;, otherOp>
<}, delimiter>
<}, delimiter>
